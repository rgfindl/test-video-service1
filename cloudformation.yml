AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VPCStack:
    Type: String
    Description: VPC Stack Name

  SharedStack:
    Type: String
    Description: Shared Stack name

  BuildStack:
    Type: String
    Description: Build Stack name

  Environment:
    Description: Environment - prod or sandbox
    Type: String
    Default: prod

  DesiredCount:
    Type: Number
    Default: '2'
    Description: Desired task count

  Path:
    Type: String
    Default: '/goldfish'
    Description: Service path

  BuildVersion:
    Type: String
    Description: Latest build version

  Version:
    Type: String
    Default: '' # Change this to deploy a different version to 'prod'
    Description: Service version

Conditions:
  UseBuildVersion: !Or
    - !Equals [!Ref Environment, 'sandbox']
    - !Equals [!Ref Version, '']

Resources:

  #############################
  # Logs
  ##############################

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - ''
          - - '/video/goldfish/'
            - Ref: Environment
      RetentionInDays: 365

  #############################
  # Roles
  ##############################

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
                "Version": "2012-10-17",
                "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "ec2:AuthorizeSecurityGroupIngress",
                            "ec2:Describe*",
                            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                            "elasticloadbalancing:Describe*",
                            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                            "elasticloadbalancing:DeregisterTargets",
                            "elasticloadbalancing:DescribeTargetGroups",
                            "elasticloadbalancing:DescribeTargetHealth",
                            "elasticloadbalancing:RegisterTargets"
                        ],
                        "Resource": "*"
                }]
            }
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-task-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
      Policies:
        - PolicyName: !Sub ecs-task-${AWS::StackName}
          PolicyDocument:
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": "s3:*",
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ses:*"
                        ],
                        "Resource": "*"
                    }
                ]
            }

  #############################
  # ALB
  ##############################

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${VPCStack}-VPCID"
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue:
          !Sub "${SharedStack}-LoadBalancerListener"
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            -
              Fn::Join:
                - ''
                - - Ref: Path
                  - '/'
                  - Ref: Environment
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward


  #############################
  # Task
  ##############################

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Essential: true
          Image: !Sub
            - "${URL}:${Version}"
            - {
                URL: { "Fn::ImportValue" : {"Fn::Sub": "${BuildStack}-RepositoryUrl" } },
                Version: {"Fn::If": ["UseBuildVersion", {"Ref": "BuildVersion"}, { "Ref": "Version" }]}
              }
          Memory: 128
          PortMappings:
            - ContainerPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region

  #############################
  # Service
  ##############################

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub "${SharedStack}-ECSCluster"
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroup

Outputs:
  Service:
    Value: !Ref 'Service'
    Export:
      Name: !Sub '${AWS::StackName}-Service'
  TaskDefinition:
    Value: !Ref 'TaskDefinition'
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinition'
  CloudWatchLogsGroup:
    Value: !Ref 'CloudWatchLogsGroup'
    Export:
      Name: !Sub '${AWS::StackName}-CloudWatchLogsGroup'